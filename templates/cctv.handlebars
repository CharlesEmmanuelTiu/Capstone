<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ThermoGuard CCTV Monitoring</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #f4f4f4;
            margin: 0;
        }
        h1 {
            margin-top: 20px;
            color: #333;
        }
        .video-feed {
            width: 60%;
            margin: 20px auto;
            border: 2px solid #333;
            background-color: #000;
            overflow: hidden;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        .alert {
            width: 30%;
            margin: 20px auto;
            padding: 2px;
            background-color: rgba(255, 0, 0, 0.8);
            color: white;
            display: none;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            position: relative;
        }
        .alert button {
            position: absolute;
            top: 5px;
            right: 10px;
            background: none;
            border: none;
            color: white;
            font-size: 1.2rem;
            cursor: pointer;
        }
        .log {
            width: 30%;
            margin: 20px auto;
            padding: 10px;
            background-color: antiquewhite;
            border-radius: 5px;
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.5);
            text-align: left;
        }
        .log h3 {
            text-align: center;
        }
        .log ul {
            list-style: none;
            padding: 0;
            max-height: 200px;
            overflow-y: auto;
        }
        .log li {
            padding: 5px;
            border-bottom: 1px solid #ddd;
            color: #444;
        }
        .log button {
            display: block;
            margin: 10px auto;
            padding: 5px 10px;
            background-color: #333;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .log button:hover {
            background-color: #555;
        }
    </style>
</head>
<body>
    <h2>Live Feed</h2>
    <div class="video-feed" id="video-feed">
        <img src="https://www.rhombus.com/img/r200-video-wall-office-theft-mike-purse-steal.gif" id="cctv-gif" alt="CCTV Feed" style="width: 100%;">
    </div>

    <div class="alert" id="alert-box">
        <button onclick="dismissAlert()">âœ•</button>
        <h2>INTRUDER ALERT!</h2>
        <p>Unrecognized person detected. Alert sent to security.</p>
    </div>

    <div class="log" id="log">
        <h3>Activity Log</h3>
        <ul id="log-list"></ul>
        <button onclick="clearLogs()">Clear Logs</button>
    </div>

    <script>
        const alertBox = document.getElementById('alert-box');
        const logList = document.getElementById('log-list');

        // Function to simulate recognizing employees and intruders
        function simulateRecognition() {
            const dummyData = [
                { name: "Employee1", recognized: true },
                { name: "Employee2", recognized: true },
                { name: "Intruder1", recognized: false },
                { name: "Intruder2", recognized: false },
            ];

            setInterval(() => {
                const randomIndex = Math.floor(Math.random() * dummyData.length);
                const person = dummyData[randomIndex];

                if (person.recognized) {
                    logEntry(`Employee recognized: ${person.name}`);
                } else {
                    handleIntruder(person.name);
                }
            }, 5000);
        }

        function handleIntruder(name) {
            alertBox.style.display = 'block'; // Show alert box
            logEntry(`Intruder detected: ${name}. Alert sent to security.`);
            sendAlert();

            // Hide the alert box after 5 seconds if not dismissed
            //setTimeout(() => {
            //    if (alertBox.style.display === 'block') {
            //        alertBox.style.display = 'none';
            //    }
            //}, 5000);
        }

        function sendAlert() {
            console.log("Alert sent to security.");
        }

        function logEntry(entry) {
            const li = document.createElement('li');
            const timestamp = new Date().toLocaleTimeString();
            li.innerText = `${timestamp} - ${entry}`;
            logList.appendChild(li);
        }

        function dismissAlert() {
            alertBox.style.display = 'none';
        }

        function clearLogs() {
            logList.innerHTML = '';
        }

        // Start the simulation
        simulateRecognition();
    </script>

</body>
</html>


{{!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ThermoGuard CCTV Monitoring</title>
    <style>
        /* Centering container */
        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            padding: 20px;
        }
        
        /* Video feed styling */
        .video-feed {
            width: 75%;
            max-width: 800px;
            border: 2px solid #0073e6;
            border-radius: 10px;
            overflow: hidden;
            background-color: #000;
            margin-bottom: 20px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        }
        .video-feed img {
            width: 100%;
            height: auto;
            display: block;
        }

        /* Alert box styling */
        .alert {
            display: none;
            width: 60%;
            max-width: 500px;
            padding: 15px 25px;
            margin: 20px 0;
            background-color: #ff4d4d;
            color: #fff;
            font-weight: bold;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
        }

        /* Log styling */
        .log {
            width: 80%;
            max-width: 800px;
            background-color: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            text-align: left;
            margin-top: 20px;
        }
        .log h3 {
            margin-bottom: 15px;
            color: #333;
        }
        .log ul {
            list-style-type: none;
            padding-left: 0;
        }
        .log li {
            padding: 8px;
            border-bottom: 1px solid #ddd;
            color: #444;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>ThermoGuard CCTV Monitoring</h1>

        <div class="video-feed" id="video-feed">
            <img src="https://www.rhombus.com/img/r200-video-wall-office-theft-mike-purse-steal.gif" id="cctv-gif" alt="CCTV Feed">
        </div>

        <div class="alert" id="alert-box">
            <h2>INTRUDER ALERT!</h2>
            <p>Unrecognized person detected. Alert sent to security.</p>
        </div>

        <div class="log" id="log">
            <h3>Activity Log:</h3>
            <ul id="log-list"></ul>
        </div>
    </div>

    <script>
        const alertBox = document.getElementById('alert-box');
        const logList = document.getElementById('log-list');

        // Function to simulate recognizing employees and intruders
        function simulateRecognition() {
            const dummyData = [
                { name: "Employee1", recognized: true },
                { name: "Employee2", recognized: true },
                { name: "Intruder1", recognized: false },
                { name: "Intruder2", recognized: false },
            ];

            setInterval(() => {
                const randomIndex = Math.floor(Math.random() * dummyData.length);
                const person = dummyData[randomIndex];

                if (person.recognized) {
                    logEntry(`Employee recognized: ${person.name}`);
                } else {
                    handleIntruder(person.name);
                }
            }, 3000);
        }

        function handleIntruder(name) {
            alertBox.style.display = 'block'; 
            logEntry(`Intruder detected: ${name}. Alert sent to security.`);
            sendAlert();

            // Hide the alert box after 5 seconds
            setTimeout(() => {
                alertBox.style.display = 'none';
            }, 5000);
        }

        function sendAlert() {
            console.log("Alert sent to security.");
        }

        function logEntry(entry) {
            const li = document.createElement('li');
            li.innerText = entry;
            logList.appendChild(li);
        }

        simulateRecognition();
    </script>

</body>
</html> --}}



{{!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ThermoGuard CCTV Monitoring</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #f4f4f4;
            margin: 0; /* Remove default margin */
        }
        .video-feed {
            width: 70%;
            margin: auto;
            border: 2px solid #333;
            background-color: #000;
            overflow: hidden;
        }
        .alert {
            width: 30%;
            margin: 20px auto; /* Center with auto margins on left and right, add margin top/bottom */
            padding: 5px; /* Increased padding for better aesthetics */
            background-color: rgba(255, 0, 0, 0.7);
            color: white;
            display: none; /* Initially hidden */
            border-radius: 5px; /* Optional: Rounded corners */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Optional: Shadow for depth */
        }
        .log {
            margin-top: 30px;
            width: 30%;
            margin: auto;
            text-align: left;
            border-radius: 5px;
            background-color: antiquewhite;
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.5);
        }
    </style>
</head>
<body>
    <h1>Live feed</h1>
    <div class="video-feed" id="video-feed">
        <!-- Use a GIF to simulate the CCTV feed -->
        <img src="https://www.rhombus.com/img/r200-video-wall-office-theft-mike-purse-steal.gif" id="cctv-gif" alt="CCTV Feed" style="width: 100%;">
    </div>

    <div class="alert" id="alert-box">
        <h2>INTRUDER ALERT!</h2>
        <p>Unrecognized person detected. Alert sent.</p>
    </div>

    <div class="log" id="log">
        <h3 style="text-align: center">Log</h3>
        <ul id="log-list"></ul>
    </div>

    <script>
        const alertBox = document.getElementById('alert-box');
        const logList = document.getElementById('log-list');

        // Function to simulate recognizing employees and intruders
        function simulateRecognition() {
            // Dummy data for recognized individuals
            const dummyData = [
                { name: "Employee1", recognized: true },
                { name: "Employee2", recognized: true },
                { name: "Intruder1", recognized: false },
                { name: "Intruder2", recognized: false },
            ];

            // Simulate recognizing individuals every 3 seconds
            setInterval(() => {
                const randomIndex = Math.floor(Math.random() * dummyData.length);
                const person = dummyData[randomIndex];

                if (person.recognized) {
                    logEntry(`Employee recognized: ${person.name}`);
                } else {
                    handleIntruder(person.name);
                }
            }, 5000);
        }

        function handleIntruder(name) {
            alertBox.style.display = 'block'; // Show alert box
            logEntry(`Intruder detected: ${name}. Alert sent!`);
            sendAlert();
        }

        function sendAlert() {
            // Placeholder for sending an alert
            console.log("Alert sent to security.");
        }

        function logEntry(entry) {
            const li = document.createElement('li');
            li.innerText = entry;
            logList.appendChild(li);
        }

        // Start the simulation
        simulateRecognition();
    </script>

</body>
</html> --}}




{{!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ThermoGuard CCTV Monitoring</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #f4f4f4;
        }
        .video-feed {
            width: 70%;
            margin: auto;
            border: 2px solid #333;
            background-color: #000;
            overflow: hidden;
        }
        .alert {
            width: 30%;
            
            align-items: center;
            padding: 10px;
            background-color: red;
            color: white;
            display: none;
        }
        .log {
            margin-top: 30px;
            width: 80%;
            margin: auto;
            text-align: left;
        }
    </style>
</head>
<body>

    <h1>ThermoGuard CCTV Monitoring</h1>

    <div class="video-feed" id="video-feed">
        <!-- Use a GIF to simulate the CCTV feed -->
        <img src="https://www.rhombus.com/img/r200-video-wall-office-theft-mike-purse-steal.gif" id="cctv-gif" alt="CCTV Feed" style="width: 100%;">
    </div>

    <div class="alert" id="alert-box">
        <h2>INTRUDER ALERT!</h2>
        <p>Unrecognized person detected. Alert sent.</p>
    </div>

    <div class="log" id="log">
        <h3>Log:</h3>
        <ul id="log-list"></ul>
    </div>

    <script>
        const alertBox = document.getElementById('alert-box');
        const logList = document.getElementById('log-list');

        // Function to simulate recognizing employees and intruders
        function simulateRecognition() {
            // Dummy data for recognized individuals
            const dummyData = [
                { name: "Employee1", recognized: true },
                { name: "Employee2", recognized: true },
                { name: "Intruder1", recognized: false },
                { name: "Employee3", recognized: true },
                { name: "Intruder2", recognized: false },
            ];

            // Simulate recognizing individuals every 3 seconds
            setInterval(() => {
                const randomIndex = Math.floor(Math.random() * dummyData.length);
                const person = dummyData[randomIndex];

                if (person.recognized) {
                    logEntry(`Employee recognized: ${person.name}`);
                } else {
                    handleIntruder(person.name);
                }
            }, 3000);
        }

        function handleIntruder(name) {
            alertBox.style.display = 'block';
            logEntry(`Intruder detected: ${name}. Alert sent!`);
            sendAlert();
        }

        function sendAlert() {
            // Placeholder for sending an alert
            console.log("Alert sent to security.");
        }

        function logEntry(entry) {
            const li = document.createElement('li');
            li.innerText = entry;
            logList.appendChild(li);
        }

        // Start the simulation
        simulateRecognition();
    </script>

</body>
</html> --}}

{{!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ThermoGuard CCTV Monitoring</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #f4f4f4;
        }
        .video-feed {
            width: 80%;
            margin: auto;
            border: 2px solid #333;
            background-color: #000;
        }
        .alert {
            margin: 20px;
            padding: 15px;
            background-color: red;
            color: white;
            display: none;
        }
        .log {
            margin-top: 30px;
            width: 80%;
            margin: auto;
            text-align: left;
        }
    </style>
</head>
<body>

    <h1>ThermoGuard CCTV Monitoring</h1>

    <div class="video-feed" id="video-feed">
        <video id="camera" autoplay></video>
    </div>

    <div class="alert" id="alert-box">
        <h2>INTRUDER ALERT!</h2>
        <p>Unrecognized person detected. Alert sent.</p>
    </div>

    <div class="log" id="log">
        <h3>Log:</h3>
        <ul id="log-list"></ul>
    </div>

    <!-- Include face-api.js from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/@vladmandic/face-api/dist/face-api.min.js"></script>
    <script>
        const video = document.getElementById('camera');
        const alertBox = document.getElementById('alert-box');
        const logList = document.getElementById('log-list');

        async function startCamera() {
            const stream = await navigator.mediaDevices.getUserMedia({ video: {} });
            video.srcObject = stream;
        }

        async function loadModels() {
            await faceapi.nets.tinyFaceDetector.loadFromUri('/models');
            await faceapi.nets.faceRecognitionNet.loadFromUri('/models');
            await faceapi.nets.ssdMobilenetv1.loadFromUri('/models');
        }

        async function startRecognition() {
            await loadModels();
            const labeledFaceDescriptors = await loadLabeledImages();
            const faceMatcher = new faceapi.FaceMatcher(labeledFaceDescriptors, 0.6);

            video.addEventListener('play', async () => {
                const canvas = faceapi.createCanvasFromMedia(video);
                document.body.append(canvas);
                const displaySize = { width: video.width, height: video.height };
                faceapi.matchDimensions(canvas, displaySize);

                setInterval(async () => {
                    const detections = await faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions())
                        .withFaceLandmarks()
                        .withFaceDescriptors();

                    const resizedDetections = faceapi.resizeResults(detections, displaySize);
                    const results = resizedDetections.map(d => faceMatcher.findBestMatch(d.descriptor));

                    canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
                    faceapi.draw.drawDetections(canvas, resizedDetections);

                    results.forEach((result, i) => {
                        const box = resizedDetections[i].detection.box;
                        const drawBox = new faceapi.draw.DrawBox(box, { label: result.toString() });
                        drawBox.draw(canvas);

                        if (result.label === 'unknown') {
                            handleIntruder();
                        } else {
                            logEntry(`Employee recognized: ${result.label}`);
                        }
                    });
                }, 100);
            });
        }

        function handleIntruder() {
            alertBox.style.display = 'block';
            logEntry("Intruder detected! Alert sent.");
            sendAlert();
        }

        function sendAlert() {
            // Placeholder for sending an alert
            console.log("Alert sent to security.");
        }

        function logEntry(entry) {
            const li = document.createElement('li');
            li.innerText = entry;
            logList.appendChild(li);
        }

        function loadLabeledImages() {
            const labels = ['Employee1', 'Employee2', 'Employee3']; // Replace with actual employee names
            return Promise.all(
                labels.map(async label => {
                    const descriptions = [];
                    for (let i = 1; i <= 3; i++) {
                        const img = await faceapi.fetchImage(`/labeled_images/${label}/${i}.jpg`);
                        const detections = await faceapi.detectSingleFace(img).withFaceLandmarks().withFaceDescriptor();
                        descriptions.push(detections.descriptor);
                    }
                    return new faceapi.LabeledFaceDescriptors(label, descriptions);
                })
            );
        }

        startCamera();
        startRecognition();
    </script>

</body>
</html> --}}
