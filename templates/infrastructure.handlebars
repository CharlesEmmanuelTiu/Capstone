<head>
    <script src="https://cdn.anychart.com/releases/v8/js/anychart-base.min.js"></script>
    <script src="https://cdn.anychart.com/releases/v8/js/anychart-ui.min.js"></script>
    <script src="https://cdn.anychart.com/releases/v8/js/anychart-exports.min.js"></script>
    <script src="https://cdn.anychart.com/releases/v8/js/anychart-linear-gauge.min.js"></script>
    <script src="https://cdn.anychart.com/releases/v8/js/anychart-table.min.js"></script>
    <link href="https://cdn.anychart.com/releases/v8/css/anychart-ui.min.css" type="text/css" rel="stylesheet">
    <link href="https://cdn.anychart.com/releases/v8/fonts/css/anychart-font.min.css" type="text/css" rel="stylesheet">
</head>

<body>

  <div class="row g-4 mb-4">
    <div class="card card3">
      <div class="card-header">
        <h3>Data Center 3D Model</h3>
          <div class="card-body" id="3d-container" style="height: 500px;">
            <!-- The Three.js renderer will be inserted here -->
          </div>
      </div>
    </div>
  </div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/examples/js/controls/OrbitControls.js"></script>
<script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>
<script>
// Set up the scene, camera, and renderer
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.z = 5;

const container = document.getElementById('3d-container'); // Ensure this div exists in your HTML
const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(container.offsetWidth, container.offsetHeight);
renderer.setClearColor(0x909090, 1); // Set background color to black
container.appendChild(renderer.domElement);

// Create the rack (outer frame)
const rackGeometry = new THREE.BoxGeometry(7, 3, 1);
const rackMaterial = new THREE.MeshBasicMaterial({ color: 0x333333 }); // Dark color for the frame
const rack = new THREE.Mesh(rackGeometry, rackMaterial);
scene.add(rack);

// Create multiple server units (smaller boxes) and add them inside the rack
const serverGeometry = new THREE.BoxGeometry(0.9, 0.3, 1.05);
const serverMaterial = new THREE.MeshBasicMaterial({ color: 0x555555 }); // Gray color for the servers
const serverUnits = [];

count = -3
height = -1
limit = 1
const serverUnit = new THREE.Mesh(serverGeometry, serverMaterial.clone()); // Clone material for each unit
  serverUnit.position.y = 1;
  serverUnit.position.x = -3;
  scene.add(serverUnit);
  serverUnits.push(serverUnit);
for (let i = -1; i <= 15; i += 0.5) {
  if (limit%5==0){
    count += 1
    height = -1
  }
  const serverUnit = new THREE.Mesh(serverGeometry, serverMaterial.clone()); // Clone material for each unit
  serverUnit.position.y = height;
  serverUnit.position.x = count;
  scene.add(serverUnit);
  serverUnits.push(serverUnit);
  height += 0.5
  limit += 1
}

// Add LEDs (small colored circles) to each server for indicators
const ledGeometry = new THREE.SphereGeometry(0.05, 16, 16);
const ledMaterialGreen = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
const ledMaterialRed = new THREE.MeshBasicMaterial({ color: 0xff0000 });

serverUnits.forEach((unit, index) => {
  const led = new THREE.Mesh(ledGeometry, index % 2 === 0 ? ledMaterialGreen : ledMaterialRed);
  led.position.set(unit.position.x + 0.4, unit.position.y, unit.position.z + 0.5);
  scene.add(led);
});

// Add lighting (optional for better visualization)
const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
scene.add(ambientLight);

const pointLight = new THREE.PointLight(0xffffff, 0.8);
pointLight.position.set(5, 5, 5);
scene.add(pointLight);

// OrbitControls for rotating and zooming the model
const controls = new THREE.OrbitControls(camera, renderer.domElement);
controls.enableDamping = true;
controls.dampingFactor = 0.05;

// Animate the scene
const animate = function () {
  requestAnimationFrame(animate);
  controls.update();
  renderer.render(scene, camera);
};

animate();

// Handle window resizing
window.addEventListener('resize', () => {
  const width = container.offsetWidth;
  const height = container.offsetHeight;
  renderer.setSize(width, height);
  camera.aspect = width / height;
  camera.updateProjectionMatrix();
});

// Hover effect with raycaster to highlight servers
const raycaster = new THREE.Raycaster();
const mouse = new THREE.Vector2();

window.addEventListener('mousemove', (event) => {
  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
  raycaster.setFromCamera(mouse, camera);

  const intersects = raycaster.intersectObjects(serverUnits);
  serverUnits.forEach((unit) => unit.material.color.set(0x555555)); // Reset color
  if (intersects.length > 0) {
    intersects[0].object.material.color.set(0xaaaaaa); // Highlight server on hover
  }
});
</script>
</body>