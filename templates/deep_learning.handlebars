<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Center Temperature Prediction</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #f4f4f9;
        }
        .container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
            padding: 20px;
        }
        .chart-container {
            width: 80%;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-bottom: 20px;
        }
        canvas {
            width: 100% !important;
            height: 500px !important;
        }
        .log {
            max-height: 100px;
            overflow-y: auto;
            border: 1px solid #ccc;
            margin-top: 10px;
            padding: 5px;
            background-color: #f9f9f9;
        }
    </style>
</head>
<body>

    <div id="log"></div>
    <div class="container">
        <div class="chart-container">
            <h2>Temperature Prediction</h2>
            <canvas id="predictionChart"></canvas>
        </div>
    </div>

<script>
    // Fetch predicted data from the Flask API
    // Fetch predicted data from the Flask API
    async function fetchPredictedData() {
        try {
            const response = await fetch('http://localhost:5000/predict', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
            });
            const data = await response.json();
            const predictions = data.predictions;
            const timeLabels = data.time_labels;  // Get the time labels
            
            console.log(predictions, timeLabels);  // Log to verify structure
            
            // Update the chart with new data if predictions are valid
            if (predictions && predictions.length > 0 && timeLabels && timeLabels.length > 0) {
                updateChart(predictions, timeLabels);
            }
        } catch (error) {
            console.error("Error fetching data:", error);
        }
    }

    // Function to update chart data
    function updateChart(predictions, timeLabels) {
        // Update labels (time) and temperature data dynamically
        predictionChart.data.labels = timeLabels;  // Use time labels for the x-axis
        predictionChart.data.datasets[0].data = predictions;
        predictionChart.update();
    }

    // Create and update the line chart
    const ctx = document.getElementById('predictionChart').getContext('2d');
    const predictionChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [],  // Dynamic labels
            datasets: [
                {
                    label: 'Temperature',
                    data: [],
                    borderColor: 'rgba(255, 99, 132, 1)',
                    fill: false,
                }
            ]
        },
        options: {
            responsive: true,
            scales: {
                x: { title: { display: true, text: 'Time' } },
                y: { title: { display: true, text: 'Temperature (°C)' } }
            }
        }
    });
    // Fetch data every second
    fetchPredictedData();
</script>



</body>
</html>




{{!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Center Temperature Monitor</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            
        }
        #alert {
            color: red;
            font-weight: bold;
        }
        #temperatureChart {
            width: 50%;
            height: 450px;
            margin-top: 20px;
            margin: 20px auto;
        }
    </style>
</head>
<body>
    <h1>Data Center Temperature Monitor</h1>
    <div>
        <p>Current Temperature: <span id="temperature">Loading...</span>°C</p>
        <p id="alert"></p>
    </div>

    <canvas id="temperatureChart"></canvas>

    <script>
        const ALERT_THRESHOLD = 5.0; // Temperature fluctuation threshold
        let previousTemp = null;
        let temperatureData = []; // Array to hold temperature readings
        let timeLabels = []; // Array to hold time labels for the chart

        // Set up Chart.js
        const ctx = document.getElementById('temperatureChart').getContext('2d');
        const temperatureChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: timeLabels,
                datasets: [{
                    label: 'Temperature (°C)',
                    data: temperatureData,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    fill: true,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Temperature (°C)'
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Time'
                        }
                    }
                }
            }
        });

        function getTemperature() {
            // Simulate temperature reading (random between 20°C and 30°C)
            return (Math.random() * 10 + 20).toFixed(2);
        }

        function sendAlert(message) {
            const alertDiv = document.getElementById("alert");
            alertDiv.innerText = message; // Display alert message on the page
            alertDiv.style.display = "block"; // Show the alert
            setTimeout(() => { alertDiv.style.display = "none"; }, 5000); // Hide after 5 seconds
            console.log(message); // Log the message in the console
        }

        function monitorTemperature() {
            setInterval(() => {
                const currentTemp = getTemperature();
                document.getElementById("temperature").innerText = currentTemp;

                // Add current temperature and time to the chart data
                const currentTime = new Date().toLocaleTimeString();
                temperatureData.push(currentTemp);
                timeLabels.push(currentTime);
                
                // Update the chart with new data
                temperatureChart.update();

                if (previousTemp !== null) {
                    // Check for significant fluctuations
                    if (Math.abs(currentTemp - previousTemp) > ALERT_THRESHOLD) {
                        const alertMessage = `Temperature fluctuation detected! Previous: ${previousTemp}°C, Current: ${currentTemp}°C`;
                        sendAlert(alertMessage);
                    }
                }

                previousTemp = currentTemp;
            }, 3000); // Check every 3 seconds
        }

        // Start monitoring when the page loads
        window.onload = monitorTemperature;
    </script>
</body>
</html> --}}





{{!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Center Temperature Monitor</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            
            
        }
        #alert {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Data Center Temperature Monitor</h1>
    <div>
        <p>Current Temperature: <span id="temperature">Loading...</span>°C</p>
        <p id="alert"></p>
    </div>

    <script>
        const ALERT_THRESHOLD = 5.0; // Temperature fluctuation threshold
        let previousTemp = null;

        function getTemperature() {
            // Simulate temperature reading (random between 20°C and 30°C)
            return (Math.random() * 10 + 20).toFixed(2);
        }

        function sendAlert(message) {
            const alertDiv = document.getElementById("alert");
            alertDiv.innerText = message; // Display alert message on the page
            alertDiv.style.display = "block"; // Show the alert
            setTimeout(() => { alertDiv.style.display = "none"; }, 5000); // Hide after 5 seconds
            console.log(message); // Log the message in the console
        }

        function monitorTemperature() {
            setInterval(() => {
                const currentTemp = getTemperature();
                document.getElementById("temperature").innerText = currentTemp;

                if (previousTemp !== null) {
                    // Check for significant fluctuations
                    if (Math.abs(currentTemp - previousTemp) > ALERT_THRESHOLD) {
                        const alertMessage = `Temperature fluctuation detected! Previous: ${previousTemp}°C, Current: ${currentTemp}°C`;
                        sendAlert(alertMessage);
                    }
                }

                previousTemp = currentTemp;
            }, 3000); // Check every 3 seconds
        }

        // Start monitoring when the page loads
        window.onload = monitorTemperature;
    </script>
</body>
</html> --}}
