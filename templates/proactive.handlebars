<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Center Monitoring</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #f4f4f9;
        }
        .container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
            padding: 20px;
        }
        .chart-container {
            width: 45%;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-bottom: 20px;
        }
        canvas {
            width: 100% !important;
            height: 300px !important;
        }
        .log {
            max-height: 100px;
            overflow-y: auto;
            border: 1px solid #ccc;
            margin-top: 10px;
            padding: 5px;
            background-color: #f9f9f9;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="chart-container">
            <h2>Temperature Monitoring</h2>
            <p>Current Temperature: <span id="temperature">Loading...</span>°C</p>
            <canvas id="temperatureChart"></canvas>
            <div id="tempLog" class="log"></div>
        </div>
        <div class="chart-container">
            <h2>Sound Level Monitoring</h2>
            <p>Current Sound Level: <span id="sound">Loading...</span> dB</p>
            <canvas id="soundChart"></canvas>
            <div id="soundLog" class="log"></div>
        </div>
        <div class="chart-container">
            <h2>Humidity Monitoring</h2>
            <p>Current Humidity: <span id="humidity">Loading...</span>%</p>
            <canvas id="humidityChart"></canvas>
            <div id="humidityLog" class="log"></div>
        </div>
        <div class="chart-container">
            <h2>Power Consumption Monitoring</h2>
            <p>Current Power Consumption: <span id="power">Loading...</span> kW</p>
            <canvas id="powerChart"></canvas>
            <div id="powerLog" class="log"></div>
        </div>
    </div>

    <script>
        const ALERT_THRESHOLDS = {
            temperature: 3,
            sound: 5,
            humidity: 10,
            power: 2
        };

        const createLogEntry = (logId, message) => {
            const logDiv = document.getElementById(logId);
            const newEntry = document.createElement("div");
            newEntry.innerText = message;
            logDiv.appendChild(newEntry);
            if (logDiv.children.length > 5) {
                logDiv.removeChild(logDiv.firstChild);
            }
        };

        const randomDataGenerator = (min, max) => (Math.random() * (max - min) + min).toFixed(1);

        const monitorMetric = (metricId, logId, dataArr, timeArr, chart, min, max, threshold) => {
            setInterval(() => {
                const currentValue = parseFloat(randomDataGenerator(min, max));
                document.getElementById(metricId).innerText = currentValue;

                // Capture current time for the x-axis label
                const currentTime = new Date().toLocaleTimeString();
                
                // Update data and labels
                timeArr.push(currentTime);
                timeArr.shift();
                dataArr.push(currentValue);
                dataArr.shift();

                // Update the chart labels and data
                chart.data.labels = timeArr;
                chart.data.datasets[0].data = dataArr;
                chart.update();

                // Check for threshold breach
                if (Math.abs(currentValue - dataArr[dataArr.length - 2]) > threshold) {
                    createLogEntry(logId, `${metricId.replace(/^\w/, (c) => c.toUpperCase())} fluctuation detected! Current: ${currentValue} at ${currentTime}`);
                }
            }, 3000);
        };


        const initChart = (ctx, label) => {
            return new Chart(ctx, {
                type: 'line',
                data: {
                    labels: Array(10).fill(""),
                    datasets: [{
                        label: label,
                        data: Array(10).fill(null),
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: { beginAtZero: true },
                        x: { 
                            title: { display: true, text: 'Time' },
                            ticks: { autoSkip: true, maxTicksLimit: 5 }
                        }
                    }
                }
            });
        };

        // Initialize charts and data arrays
        const tempChart = initChart(document.getElementById('temperatureChart').getContext('2d'), 'Temperature (°C)');
        const soundChart = initChart(document.getElementById('soundChart').getContext('2d'), 'Sound Level (dB)');
        const humidityChart = initChart(document.getElementById('humidityChart').getContext('2d'), 'Humidity (%)');
        const powerChart = initChart(document.getElementById('powerChart').getContext('2d'), 'Power Consumption (kW)');

        // Set up data and time arrays for each metric
        const tempData = Array(10).fill(null);
        const tempTime = Array(10).fill("");
        const soundData = Array(10).fill(null);
        const soundTime = Array(10).fill("");
        const humidityData = Array(10).fill(null);
        const humidityTime = Array(10).fill("");
        const powerData = Array(10).fill(null);
        const powerTime = Array(10).fill("");

        // Monitor each metric with timestamped data
        monitorMetric("temperature", "tempLog", tempData, tempTime, tempChart, 20, 30, ALERT_THRESHOLDS.temperature);
        monitorMetric("sound", "soundLog", soundData, soundTime, soundChart, 30, 50, ALERT_THRESHOLDS.sound);
        monitorMetric("humidity", "humidityLog", humidityData, humidityTime, humidityChart, 40, 60, ALERT_THRESHOLDS.humidity);
        monitorMetric("power", "powerLog", powerData, powerTime, powerChart, 0.5, 5, ALERT_THRESHOLDS.power);
    </script>
</body>
</html>


{{!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Center Temperature Monitor</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        #alert {
            color: red;
            font-weight: bold;
            margin-top: 20px;
        }
        #temperatureChart {
            width: 50%;
            height: 450px;
            margin: 20px auto;
        }
        #log {
            
            max-height: 100px;
            overflow-y: auto;
            border: 1px solid #ccc;
            margin: 20px auto;
            background-color: #f9f9f9;
        }
        p{
            margin-top: 2%;
            text-align: center;
        }
    </style>
</head>
<body>
    <div>
        <p>Current Temperature: <span id="temperature">Loading...</span>°C</p>
        <div id="alert"></div>
    </div>

    <canvas id="temperatureChart"></canvas>
    <div id="log"></div>

    <script>
        const ALERT_THRESHOLD = 3.0;
        const ALERT_THRESHOLD2 = 5.0; // Temperature fluctuation threshold
        let previousTemp = null;
        let temperatureData = []; // Array to hold temperature readings
        let timeLabels = []; // Array to hold time labels for the chart

        
        const ctx = document.getElementById('temperatureChart').getContext('2d');
        const temperatureChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: timeLabels,
                datasets: [{
                    label: 'Temperature (°C)',
                    data: temperatureData,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    fill: true,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        
                        title: {
                            display: true,
                            text: 'Temperature (°C)'
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Time'
                        }
                    }
                }
            }
        });

        function getTemperature() {
            // Simulate temperature reading (random between 20°C and 30°C)
            return (Math.random() * 10 + 20).toFixed(0);
        }

        function logAlert(message) {
            const logDiv = document.getElementById("log");
            const newLogEntry = document.createElement("div");
            newLogEntry.innerText = message;
            logDiv.appendChild(newLogEntry);
        }

        function monitorTemperature() {
            setInterval(() => {
                const currentTemp = getTemperature();
                document.getElementById("temperature").innerText = currentTemp;

                // Add current temperature and time to the chart data
                const currentTime = new Date().toLocaleTimeString();
                temperatureData.push(currentTemp);
                timeLabels.push(currentTime);
                
                // Update the chart with new data
                temperatureChart.update();

                if (previousTemp !== null) {
                    // Check for significant fluctuations
                    if (Math.abs(currentTemp - previousTemp) > ALERT_THRESHOLD) {
                        const alertMessage = `Temperature fluctuation detected! Previous: ${previousTemp}°C, Current: ${currentTemp}°C at ${currentTime}`;
                        logAlert(alertMessage); // Log the alert message
                    }
                    if (Math.abs(currentTemp - previousTemp) > ALERT_THRESHOLD2) {
                        const alertMessage = `Temp fluctuation detected by 5 degrees! Previous: ${previousTemp}°C, Current: ${currentTemp}°C at ${currentTime}`;
                        logAlert(alertMessage); // Log the alert message
                    }
                }

                previousTemp = currentTemp;
            }, 3000); // Check every 3 seconds
        }

        // Start monitoring when the page loads
        window.onload = monitorTemperature;
    </script>
</body>
</html> --}}




{{!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Center Temperature Monitor</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            
        }
        #alert {
            color: red;
            font-weight: bold;
        }
        #temperatureChart {
            width: 50%;
            height: 450px;
            margin-top: 20px;
            margin: 20px auto;
        }
    </style>
</head>
<body>
    <h1>Data Center Temperature Monitor</h1>
    <div>
        <p>Current Temperature: <span id="temperature">Loading...</span>°C</p>
        <p id="alert"></p>
    </div>

    <canvas id="temperatureChart"></canvas>

    <script>
        const ALERT_THRESHOLD = 5.0; // Temperature fluctuation threshold
        let previousTemp = null;
        let temperatureData = []; // Array to hold temperature readings
        let timeLabels = []; // Array to hold time labels for the chart

        // Set up Chart.js
        const ctx = document.getElementById('temperatureChart').getContext('2d');
        const temperatureChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: timeLabels,
                datasets: [{
                    label: 'Temperature (°C)',
                    data: temperatureData,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    fill: true,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Temperature (°C)'
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Time'
                        }
                    }
                }
            }
        });

        function getTemperature() {
            // Simulate temperature reading (random between 20°C and 30°C)
            return (Math.random() * 10 + 20).toFixed(2);
        }

        function sendAlert(message) {
            const alertDiv = document.getElementById("alert");
            alertDiv.innerText = message; // Display alert message on the page
            alertDiv.style.display = "block"; // Show the alert
            setTimeout(() => { alertDiv.style.display = "none"; }, 5000); // Hide after 5 seconds
            console.log(message); // Log the message in the console
        }

        function monitorTemperature() {
            setInterval(() => {
                const currentTemp = getTemperature();
                document.getElementById("temperature").innerText = currentTemp;

                // Add current temperature and time to the chart data
                const currentTime = new Date().toLocaleTimeString();
                temperatureData.push(currentTemp);
                timeLabels.push(currentTime);
                
                // Update the chart with new data
                temperatureChart.update();

                if (previousTemp !== null) {
                    // Check for significant fluctuations
                    if (Math.abs(currentTemp - previousTemp) > ALERT_THRESHOLD) {
                        const alertMessage = `Temperature fluctuation detected! Previous: ${previousTemp}°C, Current: ${currentTemp}°C`;
                        sendAlert(alertMessage);
                    }
                }

                previousTemp = currentTemp;
            }, 3000); // Check every 3 seconds
        }

        // Start monitoring when the page loads
        window.onload = monitorTemperature;
    </script>
</body>
</html> --}}





{{!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Center Temperature Monitor</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            
            
        }
        #alert {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Data Center Temperature Monitor</h1>
    <div>
        <p>Current Temperature: <span id="temperature">Loading...</span>°C</p>
        <p id="alert"></p>
    </div>

    <script>
        const ALERT_THRESHOLD = 5.0; // Temperature fluctuation threshold
        let previousTemp = null;

        function getTemperature() {
            // Simulate temperature reading (random between 20°C and 30°C)
            return (Math.random() * 10 + 20).toFixed(2);
        }

        function sendAlert(message) {
            const alertDiv = document.getElementById("alert");
            alertDiv.innerText = message; // Display alert message on the page
            alertDiv.style.display = "block"; // Show the alert
            setTimeout(() => { alertDiv.style.display = "none"; }, 5000); // Hide after 5 seconds
            console.log(message); // Log the message in the console
        }

        function monitorTemperature() {
            setInterval(() => {
                const currentTemp = getTemperature();
                document.getElementById("temperature").innerText = currentTemp;

                if (previousTemp !== null) {
                    // Check for significant fluctuations
                    if (Math.abs(currentTemp - previousTemp) > ALERT_THRESHOLD) {
                        const alertMessage = `Temperature fluctuation detected! Previous: ${previousTemp}°C, Current: ${currentTemp}°C`;
                        sendAlert(alertMessage);
                    }
                }

                previousTemp = currentTemp;
            }, 3000); // Check every 3 seconds
        }

        // Start monitoring when the page loads
        window.onload = monitorTemperature;
    </script>
</body>
</html> --}}
