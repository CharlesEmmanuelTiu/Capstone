<head>
    <script src="https://cdn.anychart.com/releases/v8/js/anychart-base.min.js"></script>
    <script src="https://cdn.anychart.com/releases/v8/js/anychart-ui.min.js"></script>
    <script src="https://cdn.anychart.com/releases/v8/js/anychart-exports.min.js"></script>
    <script src="https://cdn.anychart.com/releases/v8/js/anychart-linear-gauge.min.js"></script>
    <script src="https://cdn.anychart.com/releases/v8/js/anychart-table.min.js"></script>
    <link href="https://cdn.anychart.com/releases/v8/css/anychart-ui.min.css" type="text/css" rel="stylesheet">
    <link href="https://cdn.anychart.com/releases/v8/fonts/css/anychart-font.min.css" type="text/css" rel="stylesheet">
    <style>
            body { font-family: Arial, sans-serif; background-color: #f0f2f5; margin: 0; padding: 0; }
    .container { width: 90%; max-width: 800px; margin: 40px auto; }
    </style>
</head>

<body>
    <div class="body flex-grow-1 px-3">
        <div class="container-lg">
            <!-- Alerts and role-based messages -->
            {{#if mssg}}
            <div class="alert alert-{{flashType}}" role="alert">
                {{mssg}}
            </div>
            {{/if}}

            {{!-- {{#if admin}}
            <div class="alert alert-warning" role="alert">
                You are logged in as an <strong>admin</strong>. Remember to <a href="/logout" class="alert-link">log out</a>.
            </div>
            {{/if}} --}}

            <!-- System Overview Row -->
            <div class="row g-4 mb-4">
                    <!-- Power Usage Bar Chart -->
                    <div class="card card2">
                            <div class="card-header">
                                <h4>Power Usage</h4>
                            </div>
                            <div class="card-body">
                                <div id="powerGraph">
                                    <canvas id="powerUsageChart"></canvas>
                                </div>
                            </div>
                    </div>
                    <div class="card card2">
                            <div class="card-header">
                                <h4>Humidity</h4>
                            </div>
                                <div class="card-body">
                                    <center>
                                <div id="humGraph" style="width:100%; height:250px;">
                                    <canvas id="humidityChart"></canvas>
                                </div>
                                </center>
                            </div>
                    </div>
                    <div class="card card2">
                            <div class="card-header">
                                <h4>Alerts</h4>
                            </div>
                                <div class="card-bodying">
                                    <center>
                                    <table id="alertTable">
                                        <thead>
                                            <tr>
                                                <th>Alert Type</th>
                                                <th>Source</th>
                                                <th>Status</th>
                                                <th>Time</th>
                                            </tr>
                                        </thead>
                                        <tbody id="alertTableBody">
                                            <tr id="noAlertsRow">
                                                <td colspan="4" style="text-align: center;">No Recent Alerts</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    </center>
                                    {{!-- <tr>

                                        <td><img src="https://cdn-icons-png.flaticon.com/128/5641/5641074.png" alt="Temperature Alert" class="icon-small"></td>
                                        <td><a class="alert-links" href="/infrastructure">Power Controls</a></td>
                                        <td>1:11PM</td>
                                    </tr>
                                    <tr>
                                        <td><img src="https://cdn-icons-png.flaticon.com/512/5993/5993272.png" alt="Cooling Alert" class="icon-small"></td>
                                        <td><a class="alert-links" href="/infrastructure">Cooling Devices</a></td>
                                        <td>1:02PM</td>
                                    </tr>
                                    <tr>
                                        <td><img src="https://cdn-icons-png.flaticon.com/128/2602/2602046.png" alt="Intruder Alert" class="icon-small"></td>
                                        <td><a class="alert-links" href="/cctv">CCTV Detection</a></td>
                                        <td>12:30PM</td>

                                    </tr> --}}
                            </div>
                    </div>
            </div>
                <div class="row g-4 mb-4">
                    <div class="card card2">
                            <div class="card-header">
                                <h4>3D Model</h4>
                            </div>
                            <div class="card-body">
                            <div id="tempGraph" style="width: 100%; height: 260px;">
                                <div class="card-body" id="3d-container" style="height: 100%;"></div>
                            </div>
                            </div>
                    </div>
                    <div class="card card2">
                            <div class="card-header">
                                <h4>Humidity Gauge</h4>
                            </div>
                            <div class="card-bodying">
                            <div class="d-flex justify-content-between">
                                <p class="card-text"><strong>Current Humidity:</strong> <span id="currentHumidity" class="badge bg-info">%</span></p>
                                <p class="card-text"><strong>Status:</strong> <span id="currentStatus2" class="badge">Normal</span></p>
                            </div>
                                <center>
                            <div id="humidChart" style="width: 100%; height: 250px;">
                                <canvas id="humidityContainer" style="width: 100%; height: 150px;"></canvas>
                            </div>
                                </center>
                            </div>
                    </div>
                    <div class="card card2">
                            <div class="card-header">
                                <h4>Temperature</h4>
                            </div>
                            <div class="card-bodying">
                            <div class="d-flex justify-content-between">
                                <p class="card-text"><strong>Current Temp:</strong> <span id="currentTemperature" class="badge bg-info">°C</span></p>
                                <p class="card-text"><strong>Status:</strong> <span id="currentStatus" class="badge">Optimal</span></p>
                            </div>
                            <div class="d-flex justify-content-between">
                                <p class="card-text"><strong>Alerts:</strong> <span id="NumberOfAlerts" class="badge bg-warning"></span></p>
                            </div>
                            <div id="thermometerContainer" style="height: 70%;"></div>
                            </div>
                    </div>
                </div>
            {{!-- <div class="row g-4 mb-4">
                <div class="col-md-4">
                    <!-- System Status Overview -->
                    <div class="card">
                        <h5 class="card-header"><strong>System Status</strong></h5>
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <p class="card-text"><strong>Current Temp:</strong> <span class="badge bg-info">{{currentTemp}}°C</span></p>
                                <p class="card-text"><strong>Status:</strong> <span class="badge bg-success">Normal</span></p>
                            </div>
                            <div class="d-flex justify-content-between">
                                <p class="card-text"><strong>Alert Level:</strong> <span class="badge bg-warning">Moderate</span></p>
                                <p class="card-text"><strong>Last Updated:</strong> {{lastUpdated}} Sept 22, 2024</p>
                            </div>

                            <!-- Container for Thermometer Gauge -->
                            <div id="humidityContainer" style="height: 195px;"></div>
                        </div>
                    </div>
                </div>
            </div> --}}
        </div>
    </div>
    <!-- Scripts for Gathering data -->
    <script>
        document.getElementById("NumberOfAlerts").innerHTML = 0
        document.getElementById("currentStatus").innerHTML = "Optimal"
        document.getElementById("currentStatus").style.backgroundColor = "green";
        document.getElementById('currentStatus2').style.backgroundColor = "green";
        window.onload = function () {
            // Humidity gauge setup
            var target = document.getElementById('humidityContainer');
            if (!target) {
                console.error('Humidity container element not found');
                return;
            }

            var opts = {
                angle: 0,
                lineWidth: 0.2,
                radiusScale: 1,
                pointer: { length: 0.6, strokeWidth: 0.04, color: '#000000' },
                colorStart: '#6FADCF',
                colorStop: '#8FC0DA',
                strokeColor: '#E0E0E0',
                generateGradient: true
            };

            var HumidityGauge = new Gauge(target).setOptions(opts);
            HumidityGauge.maxValue = 100;
            HumidityGauge.setMinValue(0);
            HumidityGauge.animationSpeed = 32;
            HumidityGauge.set(70);

            function addLabel(value) {
                var ctx = target.getContext('2d');
                ctx.font = "20px Arial";
                ctx.textAlign = "center";
                ctx.fillStyle = "#000000";

                ctx.clearRect(0, target.height - 40, target.width, 50);
                ctx.fillText(value + "% Humidity", target.width / 2, target.height - 5);
            }

            addLabel(70);

            anychart.onDocumentReady(function () {
                const currentStatus = document.getElementById("currentStatus");
                const alertTable = document.getElementById("alertTable");

                if (!currentStatus) {
                    console.error("Element with id 'currentStatus' not found.");
                    return;
                }

                function drawLinearGauge(value) {
                    var gauge = anychart.gauges.linear();
                    gauge.data([value]).padding(10, 0, 30, 0);
                    gauge.tooltip().useHtml(true).format(function () {
                        return this.value + '°C (' + (this.value * 1.8 + 32).toFixed(1) + '°F)';
                    });

                    var scale = gauge.scale();
                    scale.minimum(10).maximum(50).ticks({ interval: 5 });

                    var axis = gauge.axis();
                    axis.scale(scale).width('0.5%').offset('-1%');
                    axis.labels().useHtml(true).format('{%Value}°C');

                    return gauge;
                }

                var gauge = drawLinearGauge(70);
                var thermometer = gauge.thermometer(0);
                thermometer.name('Thermometer').fill('green').stroke('green');
                gauge.container('thermometerContainer');
                gauge.draw();

                async function updateData() {
                    try {
                        const response = await fetch('http://127.0.0.1:5005/data');
                        const data = await response.json();
                        console.log(data);
                        const { temperature, humidity } = data;

                        // Update humidity and temperature gauges
                        HumidityGauge.set(humidity);
                        addLabel(humidity);
                        gauge.data([temperature]);
                        document.getElementById('currentTemperature').textContent = temperature + ' °C';
                        document.getElementById('currentHumidity').textContent = humidity + ' %'
                        currentStatus2 = document.getElementById('currentStatus2')
                        if (humidity >= 20 && humidity <= 80){
                            currentStatus2.style.backgroundColor = 'green'
                            currentStatus2.innerHTML = 'Normal'
                        }
                        else if(humidity > 80){
                            currentStatus2.style.backgroundColor = 'red'
                            currentStatus2.innerHTML = 'High'
                        }
                        else{
                            currentStatus2.style.backgroundColor = 'orange'
                            currentStatus2.innerHTML = 'Low'
                        }
                        // Check temperature and add alert with severity if needed
                        if (temperature > 35) {
                            currentStatus.innerHTML = "Danger";
                            currentStatus.style.backgroundColor = "red";
                            thermometer.name('Thermometer').fill('red').stroke('red');
                            addAlertRow("Temperature Alert", "Cooling System", "Critical", new Date(), temperature, humidity);
                        } else if (temperature > 27) {
                            currentStatus.innerHTML = "Risk";
                            currentStatus.style.backgroundColor = "orange";
                            thermometer.name('Thermometer').fill('orange').stroke('orange');
                            addAlertRow("Temperature Alert", "Cooling System", "Warning", new Date(), temperature, humidity);
                        } else {
                            currentStatus.innerHTML = "Optimal";
                            currentStatus.style.backgroundColor = "green";
                            thermometer.name('Thermometer').fill('green').stroke('green');
                        }
                    } catch (error) {
                        console.error('Error fetching data:', error);
                    }
                }

                // Declare a Set to store unique alerts outside of the function
                const uniqueAlerts = new Set();

                async function addAlertRow(alertType, source, status, time, temperature, humidity) {
                    const alertTableBody = document.getElementById("alertTableBody");
                    const noAlertsRow = document.getElementById("noAlertsRow");
                    
                    if (noAlertsRow) {
                        alertTableBody.removeChild(noAlertsRow);
                    }

                    const rows = alertTableBody.getElementsByTagName("tr");
                    for (let i = 0; i < rows.length; i++) {
                        const cells = rows[i].getElementsByTagName("td");
                        if (
                            cells[1].innerText === source &&
                            cells[2].innerText === status
                        ) {
                            return;
                        }
                    }

                    const newRow = alertTableBody.insertRow();
                    const alertCell = newRow.insertCell(0);
                    const sourceCell = newRow.insertCell(1);
                    const statusCell = newRow.insertCell(2);
                    const timeCell = newRow.insertCell(3);

                    alertCell.innerHTML = `<img src="https://cdn-icons-png.flaticon.com/128/5641/5641074.png" alt="${alertType}" class="icon-small">`;
                    sourceCell.innerHTML = `<a class="alert-links" href="/cooling_system">${source}</a>`;
                    timeCell.textContent = time.toLocaleTimeString();

                    statusCell.textContent = status;
                    statusCell.style.color = status === "Critical" ? "red" : status === "Warning" ? "orange" : "green";
                    document.getElementById("NumberOfAlerts").innerHTML = 1
                    // Send the alert data to MongoDB
                    fetch('http://127.0.0.1:8000/add-alert', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ alertType, source, status, time, temperature, humidity})
                    }).then(response => {
                        if (!response.ok) {
                            console.error('Failed to add alert to database');
                        }
                    }).catch(error => {
                        console.error('Error:', error);
                    });
                }
                setInterval(updateData, 2000);
            });
        };
    </script>
    <!-- Scripts for Graphs -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://bernii.github.io/gauge.js/dist/gauge.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>



    <script>
        var ctxHumidity = document.getElementById('humidityChart').getContext('2d');
        var humidityChart = new Chart(ctxHumidity, {
            type: 'pie',
            data: {
                responsive: false,
                maintainAspectRatio: false,
                labels: ['Server Rooms', 'Cooling Areas', 'Networking Rooms', 'Electrical Rooms'],
                datasets: [{
                    label: 'Humidity (°C)',
                    data: [40, 30, 15, 10],
                    backgroundColor: [
                        'rgb(75, 192, 192)',
                        'rgb(54, 162, 235)',
                        'rgb(255, 206, 86)',
                        'rgb(153, 102, 255)'
                    ],
                    borderWidth: 0
                }]
            },
            options: {
                plugins: {
                    legend: {
                        display: false  // Hide the default legend
                    },
                    datalabels: {
                        color: '#000',
                        formatter: (value, context) => {
                            const label = context.chart.data.labels[context.dataIndex];
                            return label + '\n' + value + '%';
                        },
                        offset: 20,
                        font: {
                            size: 12
                        },
                        padding: {
                            top: 2,
                            bottom: 2,
                            left: 4,
                            right: 4
                        },
                        borderRadius: 3,
                        backgroundColor: 'rgba(255, 255, 255, 0.8)',
                        borderColor: 'rgba(0, 0, 0, 0.1)',
                        borderWidth: 1,
                    }
                }
            },
            plugins: [ChartDataLabels]  // Add the datalabels plugin
        });
        var ctxPower = document.getElementById('powerUsageChart').getContext('2d');
        var powerUsageChart = new Chart(ctxPower, {
            type: 'bar',
            data: {
                labels: ['Servers', 'Cooling', 'Sensors', 'UPS'],
                datasets: [{
                    label: 'Power Usage (kW)',
                    data: [500, 300, 100, 200, 150],
                    backgroundColor: [
                        'rgb(75, 192, 192)',
                        'rgb(54, 162, 235)',
                        'rgb(255, 206, 86)',
                        'rgb(153, 102, 255)',
                    ],
                    borderColor: [
                        'rgb(0, 0, 0)',
                        'rgb(0, 0, 0)',
                        'rgb(0, 0, 0)',
                        'rgb(0, 0, 0)',
                        'rgb(0, 0, 0)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                indexAxis: 'y',
                plugins: {
                    legend: {
                        display: true, // Display legend
                        labels: {
                            generateLabels: function(chart) {
                                let labels = chart.data.labels;
                                let colors = chart.data.datasets[0].backgroundColor;
                                return labels.map((label, index) => ({
                                    text: label,
                                    fillStyle: colors[index],
                                    strokeStyle: 'rgb(0, 0, 0)',
                                    lineWidth: 1,
                                    hidden: false,
                                    index: index
                                }));
                            }
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return context.dataset.label + ': ' + context.raw + ' kW';
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: '(kW)'
                        },
                        beginAtZero: true,
                        suggestedMax: 500
                    },
                    y: {
                        display: false // Hide the y-axis labels
                    }
                }
            }
        });
    </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/examples/js/controls/OrbitControls.js"></script>
    <script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>
    <script>
    // Set up the scene, camera, and renderer
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 5;

    const container = document.getElementById('3d-container'); // Ensure this div exists in your HTML
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(container.offsetWidth, container.offsetHeight);
    renderer.setClearColor(0x909090, 1); // Set background color
    container.appendChild(renderer.domElement);

    // Create the rack (outer frame)
    const rackGeometry = new THREE.BoxGeometry(7, 5, 1);
    const rackMaterial = new THREE.MeshBasicMaterial({ color: 0x333333 }); // Dark color for the frame
    const rack = new THREE.Mesh(rackGeometry, rackMaterial);
    scene.add(rack);

    // Create multiple server units (smaller boxes) and add them inside the rack
    const serverGeometry = new THREE.BoxGeometry(0.9, 0.3, 1.05);
    const serverMaterial = new THREE.MeshBasicMaterial({ color: 0x555555 }); // Gray color for the servers
    const serverUnits = [];

    // Frame material for individual rack columns
    const columnFrameMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });

    // Frame dimensions for each column
    const columnFrameThickness = 0.05;
    const columnHeight = 5;

    // Function to create a frame around a rack column
    function createColumnFrame(xPosition) {
        // Vertical bars for each rack column
        const verticalBarGeometry = new THREE.BoxGeometry(columnFrameThickness, columnHeight, columnFrameThickness);
        const leftVerticalBar = new THREE.Mesh(verticalBarGeometry, columnFrameMaterial);
        leftVerticalBar.position.set(xPosition - 0.5, 0, 0.5); // Adjust x-position to the left of the column
        scene.add(leftVerticalBar);

        const rightVerticalBar = new THREE.Mesh(verticalBarGeometry, columnFrameMaterial);
        rightVerticalBar.position.set(xPosition + 0.5, 0, 0.5); // Adjust x-position to the right of the column
        scene.add(rightVerticalBar);

        // Horizontal bars for top and bottom of each rack column
        const horizontalBarGeometry = new THREE.BoxGeometry(1, columnFrameThickness, columnFrameThickness);
        const topBar = new THREE.Mesh(horizontalBarGeometry, columnFrameMaterial);
        topBar.position.set(xPosition, 2.5, 0.5);
        scene.add(topBar);

        const bottomBar = new THREE.Mesh(horizontalBarGeometry, columnFrameMaterial);
        bottomBar.position.set(xPosition, -2.5, 0.5);
        scene.add(bottomBar);
    }

    // Create frames for each column by specifying x positions
    const columnXPositions = [-3, -2, -1, 0, 1, 2, 3]; // Adjust these positions to align with your rack columns
    columnXPositions.forEach(xPosition => {
        createColumnFrame(xPosition);
    });

    let columnCount = -3; // Start x-position for columns
    let rowHeight = 2.2; // Start y-position from top and move downwards

    // Adjust this loop structure to fill all slots, including the top corners
    for (let col = 0; col < 7; col++) { // Loop over 7 columns
        for (let row = 0; row < 10; row++) { // Set the number of servers in each column
            const serverUnit = new THREE.Mesh(serverGeometry, serverMaterial.clone());
            
            // Set position
            serverUnit.position.y = rowHeight - row * 0.5; // Move down each row
            serverUnit.position.x = columnCount + col * 1; // Move right each column
            
            scene.add(serverUnit);
            serverUnits.push(serverUnit);
        }
    }


    // Add LEDs (small colored circles) to each server for indicators
    const ledGeometry = new THREE.SphereGeometry(0.05, 16, 16);
    const ledMaterialGreen = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
    const ledMaterialRed = new THREE.MeshBasicMaterial({ color: 0xff0000 });

    serverUnits.forEach((unit, index) => {
        const rndInt = Math.floor(Math.random() * 10) + 1
        const led = new THREE.Mesh(ledGeometry, rndInt >= 3 ? ledMaterialGreen : ledMaterialRed);
        led.position.set(unit.position.x + 0.4, unit.position.y, unit.position.z + 0.5);
        scene.add(led);
    });

    // Add lighting (optional for better visualization)
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);

    const pointLight = new THREE.PointLight(0xffffff, 0.8);
    pointLight.position.set(5, 5, 5);
    scene.add(pointLight);

    // OrbitControls for rotating and zooming the model
    const controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;

    // Animate the scene
    const animate = function () {
        requestAnimationFrame(animate);
        controls.update();
        renderer.render(scene, camera);
    };
    animate();

    // Handle window resizing
    window.addEventListener('resize', () => {
        const width = container.offsetWidth;
        const height = container.offsetHeight;
        renderer.setSize(width, height);
        camera.aspect = width / height;
        camera.updateProjectionMatrix();
    });

    // Hover effect with raycaster to highlight servers
    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();

    window.addEventListener('mousemove', (event) => {
        const { x, y } = getMousePosition(event);
        mouse.x = x;
        mouse.y = y;
        raycaster.setFromCamera(mouse, camera);

        const intersects = raycaster.intersectObjects(serverUnits);
        serverUnits.forEach((unit) => unit.material.color.set(0x555555)); // Reset color
        if (intersects.length > 0) {
            intersects[0].object.material.color.set(0xaaaaaa); // Highlight server on hover
        }

        if (infoBox.style.display === "block") {
            infoBox.style.left = `${event.clientX + 10}px`;
            infoBox.style.top = `${event.clientY + 10}px`;
        }
    });

    // Additional array to store component details for each server unit
    const componentDetails = [
        "Firewall","Network Switch", "KVM Switch", "RAID/NVME SSDs", "Server", "Server", "Server", "Server", "Network Attatched Storage", "UPS",
        "Firewall","Network Switch", "KVM Switch", "RAID/NVME SSDs", "Server", "Server", "Server", "Server", "Network Attatched Storage", "UPS",
        "Firewall","Network Switch", "KVM Switch", "RAID/NVME SSDs", "Server", "Server", "Server", "Server", "Network Attatched Storage", "UPS",
        "Firewall","Network Switch", "KVM Switch", "RAID/NVME SSDs", "Server", "Server", "Server", "Server", "Network Attatched Storage", "UPS",
        "Firewall","Network Switch", "KVM Switch", "RAID/NVME SSDs", "Server", "Server", "Server", "Server", "Network Attatched Storage", "UPS",
        "Firewall","Network Switch", "KVM Switch", "RAID/NVME SSDs", "Server", "Server", "Server", "Server", "Network Attatched Storage", "UPS",
        "Firewall","Network Switch", "KVM Switch", "RAID/NVME SSDs", "Server", "Server", "Server", "Server", "Network Attatched Storage", "UPS", // Details for the first server
        // Details for the second server,
        // Add details for each server as neededv
    ];

    // Create an HTML element to display component info
    const infoBox = document.createElement("div");
    infoBox.style.position = "absolute";
    infoBox.style.padding = "8px";
    infoBox.style.backgroundColor = "rgba(255, 255, 255, 0.9)";
    infoBox.style.border = "1px solid #ccc";
    infoBox.style.borderRadius = "5px";
    infoBox.style.display = "none"; // Initially hidden
    document.body.appendChild(infoBox);

    // Function to handle clicks
    window.addEventListener("click", (event) => {
        const { x, y } = getMousePosition(event);
        mouse.x = x;
        mouse.y = y;
        raycaster.setFromCamera(mouse, camera);

        const intersects = raycaster.intersectObjects(serverUnits);
        if (intersects.length > 0) {
            const clickedUnit = intersects[0].object;
            const index = serverUnits.indexOf(clickedUnit);

            if (index !== -1) {
                // Display the component details for the clicked server
                infoBox.innerText = `Component:\n${componentDetails[index] || ["No Details"]}`;
                infoBox.style.left = `${event.clientX + 10}px`;
                infoBox.style.top = `${event.clientY + 10}px`;
                infoBox.style.display = "block";
            }
        } else {
            infoBox.style.display = "none"; // Hide infoBox if no server is clicked
        }
    });

    function getMousePosition(event) {
    const rect = container.getBoundingClientRect(); // Container bounds
    return {
        x: ((event.clientX - rect.left) / rect.width) * 2 - 1,
        y: -((event.clientY - rect.top) / rect.height) * 2 + 1
    };
    }
    </script>
</body>